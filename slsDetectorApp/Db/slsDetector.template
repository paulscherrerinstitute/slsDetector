# $Source: /cvs/G/DRV/slsDetector/slsDetectorApp/Db/slsDetector.template,v $
# $Revision: 1.5 $    $Date: 2013/09/24 07:31:41 $
#================================================
include "ADBase.template"
include "NDFile.template"

# template for slsDetector driver
#----------------------------------
# Detector Type
#----------------------------------
record(mbbi, "$(P)$(R)DetectorType_RBV")
{
    field (DESC, "Detector type")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_DETECTOR_TYPE")
    field (ZRST, "GENERIC")
    field (ZRVL, "0")
    field (ONST, "EIGER")
    field (ONVL, "1")
    field (TWST, "GOTTHARD")
    field (TWVL, "2")
    field (THST, "JUNGFRAU")
    field (THVL, "3")
    field (FRST, "CHIPTEST")
    field (FRVL, "4")
    field (FVST, "MOENCH")
    field (FVVL, "5")
    field (SXST, "MYTHEN3")
    field (SXVL, "6")
    field (SVST, "GOTTHARD2")
    field (SVVL, "7")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Detector Status, replacing ADBase
#----------------------------------
record(mbbi, "$(P)$(R)DetectorState_RBV")
{
    field (DESC, "Detector status")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) STATUS")
    field (ZRST, "Idle")
    field (ZRVL, "0")
    field (ZRSV, "NO_ALARM")
    field (ONST, "Error")
    field (ONVL, "1")
    field (ONSV, "MAJOR")
    field (TWST, "Waiting")
    field (TWVL, "2")
    field (TWSV, "MINOR")
    field (THST, "Finished")
    field (THVL, "3")
    field (THSV, "MINOR")
    field (FRST, "Transmitting")
    field (FRVL, "4")
    field (FRSV, "MINOR")
    field (FVST, "Running")
    field (FVVL, "5")
    field (FVSV, "MINOR")
    field (SXST, "Stopped")
    field (SXVL, "6")
    field (SXSV, "MINOR")
    field (SCAN, "I/O Intr")
}
record(mbbi, "$(P)$(R)ReceiverState_RBV")
{
    field (DESC, "Receiver status")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_RECV_STATUS")
    field (ZRST, "Idle")
    field (ZRVL, "0")
    field (ZRSV, "NO_ALARM")
    field (ONST, "Error")
    field (ONVL, "1")
    field (ONSV, "MAJOR")
    field (TWST, "Waiting")
    field (TWVL, "2")
    field (TWSV, "MINOR")
    field (THST, "Finished")
    field (THVL, "3")
    field (THSV, "MINOR")
    field (FRST, "Transmitting")
    field (FRVL, "4")
    field (FRSV, "MINOR")
    field (FVST, "Running")
    field (FVVL, "5")
    field (FVSV, "MINOR")
    field (SXST, "Stopped")
    field (SXVL, "6")
    field (SXSV, "MINOR")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Detector Setting
#----------------------------------
record (mbbo, "$(P)$(R)Setting")
{
    field (DESC, "Detector setting")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SETTING")
    field (VAL,  "0")
    field (PINI, "YES")
}
record (mbbi, "$(P)$(R)Setting_RBV")
{
    field (DESC, "Detector setting")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SETTING")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Delay after trigger
#----------------------------------
record(ao, "$(P)$(R)DelayTime")
{
    field (DESC, "Delay after trigger")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DELAY_TIME")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}

record(ai, "$(P)$(R)DelayTime_RBV")
{
    field(DESC, "Delay after trigger")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_DELAY_TIME")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
#----------------------------------
# Threshold Energy 
#----------------------------------
record (longout, "$(P)$(R)ThresholdEnergy")
{
    field (DESC, "Threshold energy")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_THRESHOLD")
    field (EGU,  "eV")
    field (VAL,  "4000")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)ThresholdEnergy_RBV")
{
    field (DESC, "Threshold energy")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_THRESHOLD")
    field (EGU,  "eV")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Beam Energy 
#----------------------------------
record (longout, "$(P)$(R)BeamEnergy")
{
    field (DESC, "Beam energy")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_ENERGY")
    field (EGU,  "eV")
    field (VAL,  "8000")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)BeamEnergy_RBV")
{
    field (DESC, "Beam energy")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_ENERGY")
    field (EGU,  "eV")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Trimbits (EIGER)
#----------------------------------
record (bo, "$(P)$(R)Trimbits")
{
    field (DESC, "Load trimbits")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_TRIMBITS")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    field (PINI, "YES")
}
record (bi, "$(P)$(R)Trimbits_RBV")
{
    field (DESC, "Load trimbits")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_TRIMBITS")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Bit depth
#----------------------------------
record (longout, "$(P)$(R)BitDepth")
{
    field (DESC, "Detector bit depth")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_BIT_DEPTH")
    field (VAL,  "16")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)BitDepth_RBV")
{
    field (DESC, "Detector bit depth")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_BIT_DEPTH")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Number of Gates
#----------------------------------
record (longout, "$(P)$(R)NumGates")
{
    field (DESC, "Number of gates")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_GATES")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)NumGates_RBV")
{
    field (DESC, "Number of gates")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_GATES")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Number of Cycles
#----------------------------------
record (longout, "$(P)$(R)NumCycles")
{
    field (DESC, "Number of cycles")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_CYCLES")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)NumCycles_RBV")
{
    field (DESC, "Number of cycles")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_CYCLES")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Number of Frames
#----------------------------------
record (longout, "$(P)$(R)NumFrames")
{
    field (DESC, "Number of frames")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_FRAMES")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)NumFrames_RBV")
{
    field (DESC, "Number of frames")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_NUM_FRAMES")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Timing Mode
#----------------------------------
record (mbbo, "$(P)$(R)TimingMode")
{
    field (DESC, "Detector timing mode")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_TMODE")
    field (VAL,  "0")
    field (PINI, "YES")
}
record (mbbi, "$(P)$(R)TimingMode_RBV")
{
    field (DESC, "Detector timing mode")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_TMODE")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Software trigger (EIGER)
#----------------------------------
record(bo, "$(P)$(R)TriggerSoftware")
{
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_TRIGGER_SOFTWARE")
    field (ZNAM, "Off")
    field (ONAM, "On")
}
#----------------------------------
# Receiver callback frequency
#----------------------------------
record (longout, "$(P)$(R)ReceiverMode")
{
    field (DESC, "Data receiver mode")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_RECV_MODE")
    field (PINI, "YES")
}
record (longin, "$(P)$(R)ReceiverMode_RBV")
{
    field (DESC, "Data receiver mode")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_RECV_MODE")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Receiver stream on/off
#----------------------------------
record (bo, "$(P)$(R)ReceiverStream")
{
    field (DESC, "Enable receiver stream")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_RECV_STREAM")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    field (PINI, "YES")
}
record (bi, "$(P)$(R)ReceiverStream_RBV")
{
    field (DESC, "Enable receiver stream")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_RECV_STREAM")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}
record (longin, "$(P)$(R)ReceiverMissedPackets_RBV")
{
    field (DESC, "Receiver missed packets")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_RECV_MISSED")
    field (HIGH, "1")
    field (HSV,  "MAJOR")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# High Voltage
#----------------------------------
record (longout, "$(P)$(R)HighVoltage")
{
    field (DESC, "High voltage")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_HIGH_VOLTAGE")
    field (EGU,  "V")
    field (VAL,  "0")
    field (PINI, "YES")
}

record (longin, "$(P)$(R)HighVoltage_RBV")
{
    field (DESC, "High voltage")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_HIGH_VOLTAGE")
    field (EGU,  "V")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Setup File
#----------------------------------
record (waveform, "$(P)$(R)SetupFile")
{
    field (DESC, "Detector setup file")
    field (DTYP, "asynOctetWrite")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_SETUP_FILE")
    field (FTVL, "UCHAR")
    field (NELM, "256")
    field (PINI, "YES")
}

record (busy, "$(P)$(R)LoadSetup")
{
    field (DESC, "Load detector setup")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_LOAD_SETUP")
    field (ZNAM, "Done")
    field (ONAM, "Load")
}
#----------------------------------
# Enable Client Data Callback
#----------------------------------
record (bo, "$(P)$(R)UseDataCallback")
{
    field (DESC, "Enable data callback")
    field (DTYP, "asynInt32")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_USE_DATA_CALLBACK")
    field (ZNAM, "Disable")
    field (ONAM, "Enable")
    field (VAL,  "1")
    field (PINI, "YES")
}

record (bi, "$(P)$(R)UseDataCallback_RBV")
{
    field (DESC, "Enable data callback")
    field (DTYP, "asynInt32")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_USE_DATA_CALLBACK")
    field (ZNAM, "Disabled")
    field (ONAM, "Enabled")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Command Interface
#----------------------------------
record (waveform, "$(P)$(R)Command")
{
    field (DESC, "Command")
    field (DTYP, "asynOctetWrite")
    field (INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT)) SD_COMMAND")
    field (FTVL, "UCHAR")
    field (NELM, "256")
}
#----------------------------------
# Gates' Delay (Mythen 3)
#----------------------------------
record(ao, "$(P)$(R)Gate1Delay")
{
    field (DESC, "Gate 1 delay")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE1_DELAY")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}

record(ai, "$(P)$(R)Gate1Delay_RBV")
{
    field(DESC, "Gate 1 delay")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE1_DELAY")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)Gate2Delay")
{
    field (DESC, "Gate 2 delay")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE2_DELAY")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}

record(ai, "$(P)$(R)Gate2Delay_RBV")
{
    field(DESC, "Gate 2 delay")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE2_DELAY")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)Gate3Delay")
{
    field (DESC, "Gate 3 delay")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE3_DELAY")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}

record(ai, "$(P)$(R)Gate3Delay_RBV")
{
    field(DESC, "Gate 3 delay")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE3_DELAY")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
#----------------------------------
# Counter Mask (Mythen 3)
#----------------------------------
record(mbboDirect, "$(P)$(R)CounterMask")
{
    field (DESC, "Counter mask")
    field (DTYP, "asynUInt32Digital")
    field (OUT,  "@asynMask($(PORT),$(ADDR),0x07,$(TIMEOUT))SD_COUNTER_MASK")
    field (B0,   "1")
    field (B1,   "1")
    field (B2,   "1")
    field (PINI, "YES")
}
record(mbbiDirect, "$(P)$(R)CounterMask_RBV")
{
    field (DESC, "Counter mask")
    field (DTYP, "asynUInt32Digital")
    field (INP,  "@asynMask($(PORT),$(ADDR),0x07,$(TIMEOUT))SD_COUNTER_MASK")
    field (SCAN, "I/O Intr")
}
#----------------------------------
# Gates' Width (Mythen 3)
#----------------------------------
record(ao, "$(P)$(R)Gate1Width")
{
    field (DESC, "Gate 1 width")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE1_WIDTH")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}
record(ai, "$(P)$(R)Gate1Width_RBV")
{
    field(DESC, "Gate 1 width")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE1_WIDTH")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)Gate2Width")
{
    field (DESC, "Gate 2 width")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE2_WIDTH")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}
record(ai, "$(P)$(R)Gate2Width_RBV")
{
    field(DESC, "Gate 2 width")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE2_WIDTH")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)Gate3Width")
{
    field (DESC, "Gate 3 width")
    field (DTYP, "asynFloat64")
    field (OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE3_WIDTH")
    field (EGU,  "s")
    field (PREC, "6")
    field (VAL,  "0.1")
    field (PINI, "YES")
}
record(ai, "$(P)$(R)Gate3Width_RBV")
{
    field(DESC, "Gate 3 width")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SD_GATE3_WIDTH")
    field(EGU,  "s")
    field(PREC, "6")
    field(SCAN, "I/O Intr")
}
